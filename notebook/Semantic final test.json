{
	"name": "Semantic final test",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "enyatest3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bd54cf76-fed5-47a7-9ff8-a7cef46ca7a1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6f83e421-6b03-4154-9df4-fc8739806b66/resourceGroups/chenlizzy-playground/providers/Microsoft.Synapse/workspaces/lizzy-myworkspace/bigDataPools/enyatest3",
				"name": "enyatest3",
				"type": "Spark",
				"endpoint": "https://lizzy-myworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/enyatest3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import enya\r\n",
					"from enya.kb.kb import create_new_default_KB, _get_KB\r\n",
					"from enya.model import Attribute, LogicalType, Constraint, Entity, Relationship"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from enya.backend import set_backend, get_backend\r\n",
					"set_backend('pandas')\r\n",
					"print(get_backend())"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"backend_module = enya.backend.get_backend()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"kb = enya.KB()\r\n",
					"kb.make_default()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from enya import SemanticDataFrame"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cont_lt = LogicalType(\"Numbers\", float, tags=['numeric'])\r\n",
					"categorical_lt = LogicalType(\"States\", str, tags=['id','categorical'])\r\n",
					"str_lt = LogicalType(\"Description\", str, tags=['event'])\r\n",
					"\r\n",
					"cont_at = Attribute(\"NumbersAttribute\", cont_lt)\r\n",
					"categorical_at = Attribute(\"StatesAttribute\", categorical_lt)\r\n",
					"# Use a base type.\r\n",
					"str_at = Attribute(\"SomeDescription\", str_lt)\r\n",
					"#str_at = Attribute(\"SomeDescription\", str)\r\n",
					"\r\n",
					"df = backend_module.DataFrame(\r\n",
					"    {'numbers': [.1, 2, .3, 4, .5],\r\n",
					"        'states': ['CA', 'WA', 'CA', 'WA', 'WI'],\r\n",
					"        'descr': ['eeny', 'meeny', 'miny', 'moe', 'eeny']})\r\n",
					"sdf = SemanticDataFrame(df, {\r\n",
					"    cont_at: \"numbers\", categorical_at: \"states\", str_at: \"descr\"})"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sdf"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tags = sdf.get_tags([\"NumbersAttribute\", \"StatesAttribute\", \"SomeDescription\"])\r\n",
					"tags\r\n",
					"# assert (tags == {\"NumbersAttribute\": {'numeric'},\"StatesAttribute\": {'categorical', 'id'}})\r\n",
					"\r\n",
					"# tags = sdf.get_tags([\"numbers\", \"states\", 'descr'])\r\n",
					"# assert (tags == {\"numbers\": {'numeric'},\"states\": {'categorical', 'id'}})\r\n",
					"# tags = sdf.get_tags([\"NumbersAttribute\", \"states\", 'descr'])\r\n",
					"# assert (tags == {\"NumbersAttribute\": {'numeric'},\"states\": {'categorical', 'id'}})\r\n",
					"# tags = sdf.get_tags()\r\n",
					"# assert (tags == {\"NumbersAttribute\": {'numeric'},\"StatesAttribute\": {'categorical', 'id'}})"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sdf.get_tags()"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def simple_countplot(sdf, attribute):\r\n",
					"#     # if the attribute is a string, get the actual attribute object:\r\n",
					"#     if isinstance(attribute, str):\r\n",
					"#         attribute = sdf.attributes[attribute]\r\n",
					"#     # Check that the attribute is actually categorical\r\n",
					"#     if \"categorical\" not in attribute.get_logical_type().tags:\r\n",
					"#         raise ValueError(f\"Attribute {attribute.name} is not categorical, can't apply simple_countplot.\")\r\n",
					"#     # actually do the plotting\r\n",
					"#     series = sdf[attribute]\r\n",
					"#     series.value_counts().bar()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# simple_countplot(sdf, \"StatesAttribute\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def simple_countplot(sdf, attribute):\r\n",
					"    # if the attribute is a string, get the actual attribute object:\r\n",
					"    if isinstance(attribute, str):\r\n",
					"        attribute = sdf.attributes[attribute]\r\n",
					"    # Check that the attribute is actually categorical\r\n",
					"    if \"categorical\" not in attribute.get_logical_type().tags:\r\n",
					"        raise ValueError(f\"Attribute {attribute.name} is not categorical, can't apply simple_countplot.\")\r\n",
					"    # actually do the plotting\r\n",
					"    series = sdf[attribute]\r\n",
					"    series.value_counts().plot(kind='bar')"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"simple_countplot(sdf, \"StatesAttribute\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# s1 = sdf[\"StatesAttribute\"]\r\n",
					"# s1"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import matplotlib"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# s1.value_counts().plot(kind='bar')"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def simple_countplot(sdf, attribute):\r\n",
					"#     # if the attribute is a string, get the actual attribute object:\r\n",
					"#     if isinstance(attribute, str):\r\n",
					"#         attribute = sdf.attributes[attribute]\r\n",
					"#     # Check that the attribute is actually categorical\r\n",
					"#     if \"categorical\" not in attribute.get_logical_type().tags:\r\n",
					"#         raise ValueError(f\"Attribute {attribute.name} is not categorical, can't apply simple_countplot.\")\r\n",
					"#     # actually do the plotting\r\n",
					"#     series = sdf[attribute]\r\n",
					"#     return series.value_counts().plot(kind='bar')"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sdf.attributes[\"StatesAttribute\"].get_logical_type().tags"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"states.get_logical_type().tags"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"simple_countplot(sdf, \"StatesAttribute\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def simple_countplot_requirement(attributes):\r\n",
					"    for attribute in attributes:\r\n",
					"        if \"categorical\" in attribute.get_logical_type().tags:\r\n",
					"            return True\r\n",
					"    \r\n",
					"    return False\r\n",
					"    \r\n",
					"    \r\n",
					"    #for attribute in attributes:\r\n",
					"    # if the attribute is a string, get the actual attribute object:\r\n",
					"    # if isinstance(attribute, str):\r\n",
					"    #     attribute = sdf.attributes[attribute]\r\n",
					"    # # Check that the attribute is actually categorical\r\n",
					"    # if \"categorical\" not in attribute.get_logical_type().tags:\r\n",
					"    #     return False\r\n",
					"    # return True"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"states = sdf.attributes[\"StatesAttribute\"]"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"states"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"simple_countplot_requirement([states])"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from enya.model import SemanticFunction\r\n",
					"countplot_sf = SemanticFunction(\"countplot\", simple_countplot, simple_countplot_requirement)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"simple_countplot_requirement(sdf.attributes)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countplot_sf.is_applicable(sdf)"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(countplot_sf.is_applicable(sdf))\r\n",
					"# prints True if there is a categorical attribute"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countplot_sf(sdf)\r\n",
					"# runs simple_countplot if there is a categorical attribute, errors otherwise"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"kb.add(countplot_sf)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(dir(sdf.plot))"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def simple_countplot_suggestions(sf_name, sdf):\r\n",
					"    suggestions = []\r\n",
					"    for attribute in sdf.attributes.values:\r\n",
					"        # if isinstance(attribute, str):\r\n",
					"        #     attribute = sdf.attributes[attribute]\r\n",
					"        if 'categorical' in attribute.get_logical_type().tags:\r\n",
					"            suggestions.append(f\"{sf_name}(attribute={attribute.name})\")\r\n",
					"    return suggestions"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for attribute in sdf.attributes.values:\r\n",
					"    if 'categorical' in attribute.get_logical_type().tags:\r\n",
					"        print(True)"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for attribute in sdf.attributes.values:\r\n",
					"    if 'categorical' in attribute.get_logical_type().tags:\r\n",
					"        print(True)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for attribute in sdf.attributes.values:\r\n",
					"    type(attribute.get_logical_type())"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"simple_countplot_suggestions(\"countplot\", sdf)"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sdf.attributes.values()"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sdf.attributes.values"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sdf.attributes[\"StatesAttribute\"].get_logical_type().tags"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"states.get_logical_type().tags"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"simple_countplot_suggestions(\"countplot\", sdf)"
				],
				"execution_count": 36
			}
		]
	}
}
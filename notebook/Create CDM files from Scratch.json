{
	"name": "Create CDM files from Scratch",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "enyatest3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8de0ec9c-5ee7-4f56-bc7c-bac656db0721"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6f83e421-6b03-4154-9df4-fc8739806b66/resourceGroups/chenlizzy-playground/providers/Microsoft.Synapse/workspaces/lizzy-myworkspace/bigDataPools/enyatest3",
				"name": "enyatest3",
				"type": "Spark",
				"endpoint": "https://lizzy-myworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/enyatest3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# start by downloading the CSV files:\r\n",
					"from enya.utils.datasets import download_synthea\r\n",
					"from glob import glob\r\n",
					"download_synthea(which='small')\r\n",
					"# show the file names\r\n",
					"pattern = \"synthea/csv/*.csv\"\r\n",
					"for f in glob(pattern):\r\n",
					"    print(f)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import sklearn.experimental"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from enya.discovery import stub_from_frame\r\n",
					"import enya as en\r\n",
					"\r\n",
					"# DISABLE constraint application for now\r\n",
					"from enya.kb.config import DEFAULT_CONFIG\r\n",
					"DEFAULT_CONFIG['KB_PARAM']['AUTO_APPLY_SEMANTIC_CONSTRAINTS'] = 'disable'\r\n",
					"\r\n",
					"kb = en.KB()\r\n",
					"\r\n",
					"from enya.backend import set_backend, get_backend\r\n",
					"set_backend('koalas')\r\n",
					"print(get_backend())\r\n",
					"\r\n",
					"kb.make_default()\r\n",
					"\r\n",
					"for f in glob(pattern):\r\n",
					"    entity_name = f.split(\"/\")[-1].split(\".\")[0]\r\n",
					"    print(entity_name)\r\n",
					"    # the entities are returned, but also automatically written to the KB\r\n",
					"    stub_from_frame(entity_name=entity_name, filename=f)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"kb.get_entities()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sdf = kb.get_data(\"patients\")\r\n",
					"sdf.head()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"kb.show_relationships()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from enya.discovery import find_relationships\r\n",
					"suggested_relationships = find_relationships(kb)\r\n",
					"suggested_relationships"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from enya.model import Relationship\r\n",
					"for from_entity, from_attribute, to_entity, to_attribute, score in suggested_relationships:\r\n",
					"    Relationship(from_entity=from_entity, to_entity=to_entity, from_attribute=from_attribute, to_attribute=to_attribute)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"kb.show_relationships()"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"kb.write_to_manifest(\"synthea/cdm/synthea.manifest.cdm.json\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for f in glob(\"synthea/cdm/*\"):\r\n",
					"    print(f)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"kb.load_from_manifest(\"local:/synthea/cdm/synthea.manifest.cdm.json\")"
				],
				"execution_count": null
			}
		]
	}
}